# import * from 'administrations.graphql'
# import * from 'calendrier.graphql'
# import * from 'documents.graphql'
# import * from 'entreprises.graphql'
# import * from 'geojsons.graphql'
# import * from 'metas-activites.graphql'
# import * from 'metas.graphql'
# import * from 'points.graphql'
# import * from 'statistiques.graphql'
# import * from 'substances.graphql'
# import * from 'territoires.graphql'
# import * from 'titres-activites.graphql'
# import * from 'titres.graphql'
# import * from 'utilisateurs.graphql'

"__*__ Type du contenu json"
scalar Json

"__*__ Type du fichier"
scalar FileUpload

"""
# Query
## _Requêtes en lecture_

- [Comment tester l'API Camino ?](https://github.com/MTES-MCT/camino-api/tree/master/manual/api)

_Query_ un type _racine_ de GraphQL.

Certaines requêtes sont __publiques__.

Certaines requêtes sont __protégées__ et nécessitent une authentification par token (jwt). Elles sont signalées par une étoile __*__.

Enfin, certaines requêtes sont __semi-publiques__ et retournent un résultat plus ou moins riche selon le niveau de permission de l'utilisateur authentifié. Elles sont signalées par un plus __+__.
"""
type Query {
  "Version de l'API"
  version: String

  "__*__ Utilisateur en fonction du token"
  moi: Utilisateur

  "__+__ Titre minier en fonction de son id"
  titre(id: ID!): Titre

  "__+__ Liste de titres miniers, en fonction d'arguments (optionnels)"
  titres(
    typeIds: [ID]
    domaineIds: [ID]
    statutIds: [ID]
    substances: [String]
    noms: [String]
    entreprises: [String]
    references: [String]
    territoires: [String]
  ): [Titre]

  "__*__ Activité en fonction de son id"
  activite(id: ID!): Activite

  "Liste des activités"
  activites(typeId: ID, annee: Int): [Activite]

  "Types d'activités"
  activitesTypes: [ActiviteType]

  "__*__ Utilisateur en fonction de son id"
  utilisateur(id: ID!): Utilisateur

  "__*__ Liste d'utilisateurs en fonction d'arguments (optionnels)"
  utilisateurs(
    entrepriseIds: [ID]
    administrationIds: [ID]
    permissionIds: [ID]
    noms: [String]
  ): [Utilisateur]

  "Substance en fonction de son id"
  substance(id: ID!): Substance

  "Liste des substances"
  substances: [Substance]

  "Metas"
  devises: [Devise]
  documentsTypes: [DocumentType]
  domaines: [Domaine]
  geoSystemes: [GeoSysteme]
  referencesTypes: [ReferenceType]
  statuts: [Statut]
  types: [Type]
  unites: [Unite]

  "__+__ Liste des permissions utilisateurs"
  permissions: [Permission]

  "Entreprise en fonction de son id"
  entreprise(id: ID!): Entreprise

  "Liste des entreprises"
  entreprises: [Entreprise]

  "Administration en fonction de son id"
  administration(id: ID!): Administration

  "Liste des administrations"
  administrations: [Administration]

  "Statistiques"
  statistiques: Statistiques

  "__+__ Domaines disponibles pour un utilisateur"
  utilisateurDomaines: [Domaine]

  "__+__ Types de démarches disponibles dans un titre"
  titreDemarchesTypes(titreId: ID!, demarcheTypeId: ID): [DemarcheType]

  "__+__ Types d'étapes disponibles dans une démarche"
  demarcheEtapesTypes(titreDemarcheId: ID!, etapeTypeId: ID): [EtapeType]
}

"""
# Mutation
## _Requêtes en écriture_

- [Comment tester l'API Camino ?](https://github.com/MTES-MCT/camino-api/tree/master/manual/api)

_Mutation_ un type _racine_ de GraphQL.

Ces requêtes sont __protégées__. Elles nécessitent une authentification par token (jwt) et un niveau de permission suffisant. Elle sont signalées par une étoile __*__.
"""
type Mutation {
  "__*__ Connecte l'utilisateur en fonction de ses identifiants"
  utilisateurTokenCreer(email: String!, motDePasse: String!): UtilisateurToken

  "__*__ Crée un utilisateur"
  utilisateurCreer(utilisateur: InputUtilisateurCreation!): Utilisateur

  "__*__ Modifie un utilisateur"
  utilisateurModifier(utilisateur: InputUtilisateurModification!): Utilisateur

  "__*__ Supprime un utilisateur"
  utilisateurSupprimer(id: ID!): Utilisateur

  "__*__ Modifie le mot de passe d'un utilisateur"
  utilisateurMotDePasseModifier(
    id: ID!
    motDePasse: String!
    motDePasseNouveau1: String!
    motDePasseNouveau2: String!
  ): Utilisateur

  "__*__ Envoie un email à un utilisateur contenant une url pour modifier son mot de passe"
  utilisateurMotDePasseEmailEnvoyer(email: String!): String

  "__*__ Envoie un email à un utilisateur contenant une url pour créer son compte"
  utilisateurCreationEmailEnvoyer(email: String!): String

  "__*__ Initialise un mot de passe utilisateur"
  utilisateurMotDePasseInitialiser(
    motDePasse1: String!
    motDePasse2: String!
  ): UtilisateurToken

  "__*__ Crée un titre minier"
  titreCreer(titre: InputTitreCreation!): Titre

  "__*__ Modifie un titre minier"
  titreModifier(titre: InputTitreModification!): Titre

  "__*__ Supprime un titre minier"
  titreSupprimer(id: ID!): Titre

  "__*__ Crée une démarche et met à jour le titre minier"
  demarcheCreer(demarche: InputDemarcheCreation!): Titre

  "__*__ Modifie une démarche et met à jour le titre minier"
  demarcheModifier(demarche: InputDemarcheModification!): Titre

  "__*__ Supprime une démarche et met à jour le titre minier"
  demarcheSupprimer(id: ID!): Titre

  "__*__ Crée une étape et met à jour le titre minier"
  etapeCreer(etape: InputEtapeCreation!): Titre

  "__*__ Modifie une étape et met à jour le titre minier"
  etapeModifier(etape: InputEtapeModification!): Titre

  "__*__ Supprime une étape et met à jour le titre minier"
  etapeSupprimer(id: ID!): Titre

  "__*__ Crée un document et met à jour le titre minier"
  documentCreer(document: InputDocumentCreation!): Titre

  "__*__ Modifie un document et met à jour le titre minier"
  documentModifier(document: InputDocumentModification!): Titre

  "__*__ Supprime un document et met à jour le titre minier"
  documentSupprimer(id: ID!): Titre

  "__*__ Crée ou modifie une activité"
  activiteModifier(activite: InputActiviteModification!): Activite

  "__*__ Crée une entreprise"
  entrepriseCreer(entreprise: InputEntrepriseCreation!): Entreprise

  "__*__ Modifie une entreprise"
  entrepriseModifier(entreprise: InputEntrepriseModification!): Entreprise
}
