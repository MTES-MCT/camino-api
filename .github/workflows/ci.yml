name: CI
on:
  push:
  pull_request:
  release:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: camino_tests
          PGUSER: postgres
          PGPASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Npm install
        run: |
          npm ci
          npm run build
        env:
          CI: true
      - name: Unit tests
        run: npm run ci:test-unit
      - name: Code coverage
        run: npm run ci:codecov
        env:
          CODECOV_TOKEN: '0ca8ffb4-8bdd-45cd-891d-5d0000bdd6ff'
      - name: Integration tests
        #Installation d’une version de knex-db-manager qui seed la bdd séquentiellement
        run: |
          npm i knex-db-manager@git://github.com/Vincit/knex-db-manager.git#afb48be58f35c0907f328dbe33d6f786cfb4fb8b --save
          npm run ci:test-integration
        env:
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: postgres
          PGPASSWORD: password
  #      - name: Code coverage
  #        run: npm run ci:codecov
  #        env:
  #          CODECOV_TOKEN: '0ca8ffb4-8bdd-45cd-891d-5d0000bdd6ff'

  build:
    if: github.ref == 'refs/heads/master'
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Build Docker image
        run: docker build . --tag caminofr/camino-api:master
      - name: Push Docker image to the Docker Hub
        run: |
          docker login --username "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD"
          docker push caminofr/camino-api:master
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    #   - name: Redeploy dev
    #     run : |
    #       ssh dev
    #       /srv/script/api-deploy

  release:
    if: github.event_name == 'release'
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Add the release tag
        run: |
          docker login --username "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD"
          docker pull caminofr/camino-api:master
          docker tag caminofr/camino-api:master caminofr/camino-api:$VERSION
          docker push caminofr/camino-api:$VERSION
          docker tag caminofr/camino-api:master caminofr/camino-api:latest
          docker push caminofr/camino-api:latest
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          VERSION: ${{ github.event.release.tag_name }}

  docs:
    if: github.event_name == 'release'
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Generate docs
        run: |
          npm ci
          npm run docs
        env:
          CI: true
      - name: Build Docker image
        run: docker build -f Dockerfile.docs . --tag caminofr/camino-api-docs
      - name: Push Docker image to the Docker Hub
        run: |
          docker login --username "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD"
          docker push caminofr/camino-api-docs
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
